{
  "alias": "slivo_final_guage",
  "name": " Final Gradient Gauge",
  "image": null,
  "description": null,
  "descriptor": {
    "type": "latest",
    "sizeX": 7.5,
    "sizeY": 9.5,
    "resources": [],
    "templateHtml": "\r\n<div class=\"container\" id=\"con500\">\r\n    <div class=\"container_body\">\r\n\r\n        <div class=\"circular-progress\" >\r\n            <div id =\"rectangular-shape\" class=\"rectangular-shape\"></div>\r\n            <div id =\"rectangular-shape2\" class=\"rectangular-shape2\"></div>\r\n              <div class=\"rectangular-shape3\">\r\n                <div class=\"end-circleR3\"></div>\r\n            </div>\r\n            <div class=\"rectangular-shape4\">\r\n                <div class=\"end-circleR4\"></div>\r\n            </div>\r\n            <div id=\"rect-pointer\" class=\"rect-pointer\">\r\n                <div class=\"end-circle2\">\r\n                     <div id=\"end-circle\" class=\"end-circle\"></div>\r\n                </div>\r\n            </div>\r\n            <div id=\"value-container\" class=\"value-container\" name=\"name\">0</div>\r\n        </div>\r\n\r\n    </div>\r\n</div>",
    "templateCss": "#container {\r\n    width: 100%;\r\n   \r\n    font-family: \"Roboto\", sans-serif;\r\n     font-size: 2.5vw;   \r\n    \r\n    \r\n}\r\n\r\n.container_body{\r\n    width: 100%;\r\n    height: 0;\r\n    padding-bottom: 100%;\r\n    \r\n    background:  rgba(255, 2, 0, 0);\r\n    position: relative;\r\n\r\n    overflow: hidden;\r\n}\r\n.circular-progress {\r\n\r\n    transform: rotate(0deg);\r\n    display: flex;\r\n    margin: 5%;\r\n    justify-content: center;\r\n    align-items: center;\r\n    /* padding-bottom: 90%; */\r\n    width: 90%;\r\n    /*max-width: 400px;*/\r\n    border-radius: 50%;\r\n    /*background: conic-gradient(from -140deg, #41D0F4 0, #67D250 10%, #E7E11E 20%, #F88424 25%, #EA445B 35%, #AD3EC5 50%, #6810F7 100%);*/\r\n        /*background: conic-gradient(from -140deg, #67D250 0deg, #67D250 44.4deg ,#E7E11E 64.4deg, #E7E11E 120deg,*/\r\n        /*                       #F88424 140deg, #F88424 201deg, #EA445B 221deg, #EA445B 270deg);*/\r\n\r\n   \r\n}\r\n\r\n\r\n.circular-progress:before {\r\n    content: \"\";\r\n    /*position: absolute;*/\r\n    margin: 3%;\r\n    padding-bottom: 94%;\r\n    width: 94%;\r\n    background-color: var(--cp-color);\r\n    /*background: linear-gradient(white 0, #000000 50%);*/\r\n    border-radius: 50%;\r\n}\r\n\r\n.rect-pointer\r\n{\r\n    transform: rotate(311.5deg);\r\n    width: 100%;\r\n    position: absolute;\r\n    background: rgba(103, 210, 80, 0);\r\n\r\n}\r\n\r\n\r\n\r\n\r\n.end-circle2 {\r\n    width: 9%;\r\n    display: flex;\r\n    align-items: center;\r\n    padding-top: 1.5%;\r\n    padding-bottom: 1.5%;\r\n    margin: -3%;\r\n    background: var(--cp-color);\r\n    border-radius: 50%;\r\n    justify-content: center;\r\n\r\n\r\n}\r\n\r\n.end-circle {\r\n    width: 70%;\r\n    padding-bottom: 70%;\r\n    margin-top: -5%;\r\n    margin-bottom: -5%;\r\n    background: rgb(137, 137, 143);\r\n    border-radius: 50%;\r\n}\r\n\r\n\r\n\r\n.rectangular-shape\r\n{\r\n    transform: rotate(40deg);\r\n    top: 86%;\r\n    left: 9%;\r\n    position: absolute;\r\n    height: 38%;\r\n    width: 45%;\r\n    background-color: var(--cp-color);\r\n    z-index: -1;\r\n}\r\n.rectangular-shape2\r\n{\r\n    transform: rotate(140deg);\r\n    top: 86.5%;\r\n    left: 45.7%;\r\n    position: absolute;\r\n    height: 38%;\r\n    width: 45%;\r\n    background-color: var(--cp-color);\r\n    z-index: -1;\r\n\r\n}\r\n.rectangular-shape3\r\n{\r\n    transform: rotate(311.5deg);\r\n    width: 100%;\r\n    padding-bottom: 0;\r\n    position: absolute;\r\n    background: rgb(45 255 0 / 0%);\r\n}\r\n.rectangular-shape4\r\n{\r\n    transform: rotate(229deg);\r\n    width: 100%;\r\n    padding-bottom: 0;\r\n    position: absolute;\r\n    background: rgba(0, 63, 255, 0);\r\n}\r\n\r\n\r\n.end-circleR3\r\n{\r\n    width: 3%;\r\n    padding-bottom: 3%;\r\n    background: blue;\r\n    border-radius: 50%;\r\n}\r\n.end-circleR4\r\n{\r\n    width: 3%;\r\n    padding-bottom: 3%;\r\n    /*background: rgb(137, 137, 143);*/\r\n    background: red;\r\n    border-radius: 50%;\r\n}\r\n\r\n\r\n.value-container {\r\n    \r\n   \r\n    /*background: rgba(255, 255, 255, 0);*/\r\n    /*font-color: #808080;*/\r\n    position: absolute;\r\n    \r\n    overflow: hidden;\r\n}\r\n\r\n\r\n\r\n\r\n",
    "controllerScript": "var gaugeElement;\nvar rectPointer;\nvar minValue;   \nvar maxValue;\nvar progressRotate; // podla tohto urcujem aktualnu farbu gulicky\nvar progressSpeed; // ak mam rozshah teploty  0 az 100 rychlost je 2.7 [270/100]\nvar bgcolor1;\nvar bgcolor2;\nvar val1;\nvar val2;\nvar rectPointer;\nvar objectCounter = [];\nvar currentObject = 0;\nvar colorSet;\nvar valueSet;\n \nself.onInit = function() {\n    \n    //========================================================================\n    // DOLEZITE PRI POUZIVANI WIDGETU VIACKRAT\n     gaugeElement = $('#con500', self.ctx.$container)[0];\n     \n      \n      \n    //========================================================================\n    \n    self.ctx.datasourceTitleCells = [];\n    self.ctx.valueCells = [];\n    self.ctx.labelCells = [];\n    \n    for (var i=0; i < self.ctx.datasources.length; i++) \n    {\n        var tbDatasource = self.ctx.datasources[i];\n        var datasourceId = 'tbDatasource' + i;\n        \n        var datasourceContainer = $('#' + datasourceId,\n            self.ctx.$container);\n\n        \n        var datasourceTitleCell = $('.tbDatasource-title', datasourceContainer);\n        self.ctx.datasourceTitleCells.push(datasourceTitleCell);\n        \n        var tableId = 'table' + i;\n      \n        var table = $('#' + tableId, self.ctx.$container);\n\n        for (var a = 0; a < tbDatasource.dataKeys.length; a++) {\n            var dataKey = tbDatasource.dataKeys[a];\n            var labelCellId = 'labelCell' + a;\n            var cellId = 'cell' + a;\n            table.append(\"<tr><td id='\" + labelCellId + \"'>\" + dataKey.label +\n                \"</td><td id='\" + cellId +\n                \"'></td></tr>\");\n            var labelCell = $('#' + labelCellId, table);\n            self.ctx.labelCells.push(labelCell);\n            var valueCell = $('#' + cellId, table);\n            self.ctx.valueCells.push(valueCell);\n        }\n    }    \n    \n    self.onResize();\n    \n      for (var c = 0; c < self.ctx.valueCells.length; c++) {\n        var cellData = self.ctx.data[c];\n        if (cellData && cellData.data && cellData.data.length > 0) {\n            var tvPair = cellData.data[cellData.data.length -\n                1];\n            var value = tvPair[1];\n       \n        }\n    }\n\n//=============================================================================    \n    maxValue = self.ctx.settings.maxx;\n    minValue = self.ctx.settings.minn;\n    bgcolor1 = self.ctx.settings.grad1;\n    bgcolor2 = self.ctx.settings.grad2;\n    bgcolor3 = self.ctx.settings.grad3;\n    bgcolor4 = self.ctx.settings.grad4;\n    bgcolor5 = self.ctx.settings.grad5;\n    val1 = self.ctx.settings.grad1Deg;\n    val2 = self.ctx.settings.grad2Deg;\n    val3 = self.ctx.settings.grad3Deg;\n    val4 = self.ctx.settings.grad4Deg;\n    val5 = self.ctx.settings.grad5Deg;\n    colorSet = [bgcolor1,bgcolor2,bgcolor3,bgcolor4,bgcolor5];\n    valueSet = [val1,val2,val3,val4,val5];\n     \n\n//============================================================================= \n    gaugeCO22 = new GaugeCO22(minValue, maxValue);\n    while(objectCounter[currentObject] != null)\n    {\n        currentObject++;\n    }\n    \n    objectCounter[currentObject] = gaugeCO22;\n    objectCounter[currentObject].createGradient(gaugeElement, colorSet, valueSet);\n    objectCounter[currentObject].setGaugeValue(gaugeElement, value, colorSet, valueSet);\n}\n\n//=============================================================================\n//*** TRIEDA POHYBU GULICKY NA ZAKLADE STANOVENEJ TEPLOTY ***\n//=============================================================================\n    class GaugeCO22 {\n        \n        constructor(minValue, maxValue)\n        {\n            this.minValue = minValue;\n            this.maxValue = maxValue;\n            progressSpeed = 277/Math.abs(maxValue - minValue);\n        }\n        \n        //TU SA VYGENEREUJE GRADIENT DO CSS\n        createGradient(gauge, colorSet, valueSet)\n        {\n       \n         var s1 = (valueSet[0] * progressSpeed);\n         var s2 = (valueSet[1] * progressSpeed);\n         var s3 = (valueSet[2] * progressSpeed);\n         var s4 = (valueSet[3] * progressSpeed);\n         var s5 = (valueSet[4] * progressSpeed);\n         \n         var startC1 = s1 + 10; \n         var startC2 = s2 + 10; \n         var startC3 = s3 + 10; \n         var startC4 = s4 + 10; \n         var startC5 = s5 + 10; \n         \n         var endC1 = s1 - 10; \n         var endC2 = s2 - 10; \n         var endC3 = s3 - 10; \n         var endC4 = s4 - 10; \n         var endC5 = s5 - 10; \n         \n           gauge.querySelector(\".end-circleR3\").style.background = colorSet[0];\n           gauge.querySelector(\".end-circleR4\").style.background = colorSet[4];\n         \n           \n           var themeColor = self.ctx.settings.theme;\n        \n           \n        //   gauge.querySelector(\".rectangular-shape\").style.background = themeColor;\n        //   gauge.querySelector(\".rectangular-shape2\").style.background = themeColor;  \n        //  gauge.querySelector(\".end-circle2\").style.background = themeColor;\n           \n           var cp = gauge.querySelector(\".rectangular-shape\");\n           var rs1 = gauge.querySelector(\".rectangular-shape2\");\n           var rs2 = gauge.querySelector(\".circular-progress\");\n           var ec = gauge.querySelector(\".end-circle2\");\n           \n           cp.style.setProperty(\"--cp-color\", themeColor);\n           rs1.style.setProperty(\"--cp-color\", themeColor);\n           rs2.style.setProperty(\"--cp-color\", themeColor);\n           ec.style.setProperty(\"--cp-color\", themeColor);\n          \n           \n         \n     \n           \n           gauge.querySelector(\".circular-progress\").style.background = \n         'conic-gradient(from  -140deg, '+colorSet[0]+' 0deg,'+colorSet[0]+' '+endC1+'deg,'+ colorSet[1]+' '+startC1+'deg,  '+colorSet[1]+' '+endC2+'deg,'+ colorSet[2]+' '+startC2+'deg,  '+colorSet[2]+' '+endC3+'deg,'+ colorSet[3]+' '+startC3+'deg,  '+colorSet[3]+' '+endC4+'deg,'+ colorSet[4]+' '+startC4+'deg,  '+colorSet[4]+' '+endC5+'deg)';      \n                \n            \n        }\n\n      setGaugeValue(gauge, value, colorSet, valueSet) {\n        \n        var value1;\n        \n        if(value == \"VÝBORNÁ\" || value == \"NÍZKE\" || value == \"LOW\" || value == \"EXCELLENT\"){\n            value1 = 0.6;\n        }else if(value == \"DOBRÁ\" || value == \"STREDNÉ\" || value == \"MEDIUM\" || value == \"GOOD\"){\n            value1 = 1.8;\n        }else if(value == \"PRIEMERNÁ\" || value == \"VYSOKÉ\" || value == \"AVERAGE\" || value == \"HIGH\"){\n            value1 = 3.1;\n        }else if(value == \"ZLÁ\" || value == \"BAD\"){\n            value1 = 4.1;\n        }else if(value == \"VEĽMI ZLÁ\" || value == \"VERY BAD\"){\n            value1 = 4.9;\n        }else{\n            value1 = value;\n        }\n        \n      if (value1 < this.minValue || value1 > this.maxValue) \n      {\n      \n        if(value1 < this.minValue)\n        {\n            gauge.querySelector(\".rect-pointer\").style.transform = `rotate(${\n            311.5\n            }deg)`;\n            gauge.querySelector(\".end-circle\").style.background = colorSet[0];\n         }\n        if(value1 > this.maxValue)\n        {\n            gauge.querySelector(\".rect-pointer\").style.transform = `rotate(${\n            228.5\n            }deg)`;\n            gauge.querySelector(\".end-circle\").style.background = colorSet[4];\n        }\n        progressRotate = value1 * progressSpeed;\n        gauge.querySelector(\".value-container\").textContent = `${value}`+self.ctx.units;\n        return;\n      }\n      else\n      {\n        gauge.querySelector(\".rect-pointer\").style.transform = `rotate(${\n        (value1 - this.minValue) * progressSpeed + 311.5\n        }deg)`;\n        \n        progressRotate = (value1 - this.minValue) * progressSpeed;\n        gauge.querySelector(\".value-container\").textContent = `${value}`+self.ctx.units;\n     \n   \n        var s1 = (valueSet[0] * progressSpeed);\n        var s2 = (valueSet[1] * progressSpeed);\n        var s3 = (valueSet[2] * progressSpeed);\n        var s4 = (valueSet[3] * progressSpeed);\n        var s5 = (valueSet[4] * progressSpeed);\n        \n            //ZMENA FARBY GULICKY\n            if((progressRotate) >= 0)\n            {\n                gauge.querySelector(\".end-circle\").style.background = colorSet[0]; \n            }\n            if( ( progressRotate > s1 ) && ( s1 != 0 ) )\n            {\n                gauge.querySelector(\".end-circle\").style.background = colorSet[1]; \n            }\n            if(( progressRotate > s2 ) && ( s2 != 0 ))\n            {\n                gauge.querySelector(\".end-circle\").style.background = colorSet[2]; \n            }\n            if(( progressRotate > s3 ) && ( s3 != 0 ))\n            {\n                gauge.querySelector(\".end-circle\").style.background = colorSet[3]; \n            }\n            if(( progressRotate > s4 ) && ( s4 != 0 ))\n            {\n                gauge.querySelector(\".end-circle\").style.background = colorSet[4]; \n            }\n          \n      }\n    \n    \n   \n}\n\n}\n//=============================================================================\n//\n//=============================================================================\n\nself.onDataUpdated = function() {\n    for (var i = 0; i < self.ctx.valueCells.length; i++) {\n        var cellData = self.ctx.data[i];\n        if (cellData && cellData.data && cellData.data.length > 0) {\n            var tvPair = cellData.data[cellData.data.length -\n                1];\n            var value = tvPair[1];\n            var textValue;\n            //toDo -> + IsNumber\n            \n            if (isNumber(value)) {\n                var decimals = self.ctx.decimals;\n                var units = self.ctx.units;\n                if (cellData.dataKey.decimals || cellData.dataKey.decimals === 0) {\n                    decimals = cellData.dataKey.decimals;\n                }\n                if (cellData.dataKey.units) {\n                    units = cellData.dataKey.units;\n                }\n                txtValue = self.ctx.utils.formatValue(value, decimals, units, true);\n            } else {\n                txtValue = value;\n            }\n            self.ctx.valueCells[i].html(txtValue);\n        }\n         \n    }\n    \n    \n      \n     objectCounter[currentObject].setGaugeValue(gaugeElement, value, colorSet, valueSet);\n    function isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n}\n\nself.onResize = function() {\n    var datasourceTitleFontSize = self.ctx.height/8;\n    if (self.ctx.width/self.ctx.height <= 1.5) {\n        datasourceTitleFontSize = self.ctx.width/12;\n    }\n    datasourceTitleFontSize = Math.min(datasourceTitleFontSize, 20);\n    for (var i = 0; i < self.ctx.datasourceTitleCells.length; i++) {\n        self.ctx.datasourceTitleCells[i].css('font-size', datasourceTitleFontSize+'px');\n    }\n    var valueFontSize = self.ctx.height/9;\n    var labelFontSize = self.ctx.height/9;\n    if (self.ctx.width/self.ctx.height <= 1.5) {\n        valueFontSize = self.ctx.width/15;\n        labelFontSize = self.ctx.width/15;\n    }\n    valueFontSize = Math.min(valueFontSize, 180);\n    labelFontSize = Math.min(labelFontSize, 180);\n    var element = $('#value-container', self.ctx.$container)[0];\n    element.style.fontSize = self.ctx.width/8 + \"px\";\n    \n    for (i = 0; i < self.ctx.valueCells; i++) {\n        self.ctx.valueCells[i].css('font-size', valueFontSize+'px');\n        self.ctx.valueCells[i].css('height', valueFontSize*2.5+'px');\n        self.ctx.valueCells[i].css('padding', '0px ' + valueFontSize + 'px');\n        self.ctx.labelCells[i].css('font-size', labelFontSize+'px');\n        self.ctx.labelCells[i].css('height', labelFontSize*2.5+'px');\n        self.ctx.labelCells[i].css('padding', '0px ' + labelFontSize + 'px');\n        \n    }     \n     \n}\n\nself.onDestroy = function() {\n}\n",
    "settingsSchema": "{\n    \"schema\":{\n      \"type\": \"object\",\n      \"title\": \"EntitiesWidgetSettings\",\n      \"properties\": {\n        \n        \"minn\": {\n          \"title\": \"Minimalne rozpatie\",\n          \"type\": \"number\",\n          \"default\": 0\n        },\"maxx\": {\n          \"title\": \"Maximalne rozpatie\",\n          \"type\": \"number\",\n          \"default\": 100\n        },\n        \n       \"theme\": {\n          \"title\": \"Shape-color\",\n          \"type\": \"string\",\n          \"default\": \"#e3e3e3\"\n        },\n        \n     \n        \n        \"grad1\": \n        {\n          \"title\": \"Gradient 1\",\n          \"type\": \"string\",\n          \"default\": \"#e3e3e3\"\n        },  \n        \"grad1Deg\": \n        {\n          \"title\": \"Gradient:Stop Color Value\",\n          \"type\": \"number\",\n          \"default\": 10\n        },   \n        \"grad2\": \n        {\n          \"title\": \"Gradient 2\",\n          \"type\": \"string\",\n          \"default\": \"#e3e3e3\"\n        },   \n        \"grad2Deg\": \n        {\n          \"title\": \"Gradient2:Stop Color Value\",\n          \"type\": \"number\",\n          \"default\": 30\n        },   \"grad3\": \n        {\n          \"title\": \"Gradient 3\",\n          \"type\": \"string\",\n          \"default\": \"#e3e3e3\"\n        },   \n        \"grad3Deg\": \n        {\n          \"title\": \"Gradient3:Stop Color Value\",\n          \"type\": \"number\",\n          \"default\": 50\n        },   \"grad4\": \n        {\n          \"title\": \"Gradient 4\",\n          \"type\": \"string\",\n          \"default\": \"#e3e3e3\"\n        },   \n        \"grad4Deg\": \n        {\n          \"title\": \"Gradient4:Stop Color Value\",\n          \"type\": \"number\",\n          \"default\": 80\n        },   \"grad5\": \n        {\n          \"title\": \"Gradient 5\",\n          \"type\": \"string\",\n          \"default\": \"#e3e3e3\"\n        },   \n        \"grad5Deg\": \n        {\n          \"title\": \"Gradient5:Stop Color Value\",\n          \"type\": \"number\",\n          \"default\": 100\n        }\n        \n  \n        \n      }, \"required\": []\n    }\n  \n       \n}",
    "dataKeySettingsSchema": "{}\n",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#ffffff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"minn\":0,\"maxx\":100,\"grad1\":\"#c74a67\",\"grad1Deg\":29,\"grad2\":\"#171415\",\"grad2Deg\":60,\"grad3\":\"#54a6c7\",\"grad3Deg\":75,\"grad4\":\"#3fd478\",\"grad4Deg\":90,\"grad5\":\"#ced433\",\"grad5Deg\":100,\"theme\":\"#ffffff\"},\"title\":\" Final Gradient Gauge\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"enableDataExport\":true,\"widgetStyle\":{},\"widgetCss\":\"\",\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"noDataDisplayMessage\":\"\",\"showLegend\":false}"
  }
}