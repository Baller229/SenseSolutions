{
  "alias": "linear_grad_claass",
  "name": "Linear grad claass",
  "image": null,
  "description": null,
  "descriptor": {
    "type": "latest",
    "sizeX": 7,
    "sizeY": 2.5,
    "resources": [],
    "templateHtml": "    <div class=\"container\" id=\"con600\">\r\n        <div class=\"progress\" id=\"progress\">\r\n            <p class=\"percent\">0 %</p>\r\n            <div class=\"progress-bar\">\r\n                <div class=\"progressing\"></div>\r\n                <div class=\"circle\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n",
    "templateCss": "\r\n\r\n.progress h6 {\r\n    \r\n    font-size: 14px;\r\n    letter-spacing: 1px;\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n.progress .progress-bar {\r\n    \r\n    margin: 0 auto;\r\n    margin-top: 0px;\r\n    width: 95%;\r\n    height: 7px;\r\n    border-radius: 100px;\r\n    /*background: linear-gradient(to right, green 0%, yellow 30%, red 100%);*/\r\n}\r\n\r\n.progress .progress-bar .progressing {\r\n    width: 0;\r\n    height: 100%; \r\n    border-radius: 30px;\r\n   \r\n   \r\n}\r\n\r\n.circle{\r\n    margin-top: -2.2px;\r\n    margin-left: 2.5%;\r\n    \r\n}\r\n\r\n.circle {\r\n    position: absolute;\r\n    left: 3%;\r\n    width: 20px; \r\n    height: 20px; \r\n    /*background: green;*/\r\n    \r\n    \r\n    \r\n    /*Vlastna farba ramceku gulicky zo settings*/\r\n    border: 3px solid var(--cp-color);\r\n    /*border: 3px solid #fff;*/\r\n    border-radius: 50%;\r\n    transform: translateY(-11px) translateX(-10px);\r\n}\r\n\r\n\r\n.progress .percent {\r\n    text-align: center;\r\n\r\n    margin-bottom: 5px;\r\n\r\n\r\n}\r\n",
    "controllerScript": "var objectCounter2 = [];\nvar currentObject2 = 0;\nvar gaugeElement2;\nvar colorSet;\nvar valueSet;\nvar minValue;\nvar maxValue;\nvar progressSpeed;\nvar progressRotate;\n\nself.onInit = function() {\n    \n    //========================================================================\n    // DOLEZITE PRI POUZIVANI WIDGETU VIACKRAT\n     gaugeElement2 = $('#con600', self.ctx.$container)[0];\n     \n    //========================================================================\n    \n    self.ctx.datasourceTitleCells = [];\n    self.ctx.valueCells = [];\n    self.ctx.labelCells = [];\n    \n    for (var i=0; i < self.ctx.datasources.length; i++) \n    {\n        var tbDatasource = self.ctx.datasources[i];\n        var datasourceId = 'tbDatasource' + i;\n        \n        var datasourceContainer = $('#' + datasourceId,\n            self.ctx.$container);\n\n        \n        var datasourceTitleCell = $('.tbDatasource-title', datasourceContainer);\n        self.ctx.datasourceTitleCells.push(datasourceTitleCell);\n        \n        var tableId = 'table' + i;\n      \n        var table = $('#' + tableId, self.ctx.$container);\n\n        for (var a = 0; a < tbDatasource.dataKeys.length; a++) {\n            var dataKey = tbDatasource.dataKeys[a];\n            var labelCellId = 'labelCell' + a;\n            var cellId = 'cell' + a;\n            table.append(\"<tr><td id='\" + labelCellId + \"'>\" + dataKey.label +\n                \"</td><td id='\" + cellId +\n                \"'></td></tr>\");\n            var labelCell = $('#' + labelCellId, table);\n            self.ctx.labelCells.push(labelCell);\n            var valueCell = $('#' + cellId, table);\n            self.ctx.valueCells.push(valueCell);\n        }\n    }    \n    \n    self.onResize();\n    \n      for (var c = 0; c < self.ctx.valueCells.length; c++) {\n        var cellData = self.ctx.data[c];\n        if (cellData && cellData.data && cellData.data.length > 0) {\n            var tvPair = cellData.data[cellData.data.length -\n                1];\n            var value = tvPair[1];\n       \n        }\n    }\n    \n    maxValue = self.ctx.settings.maxx;\n    minValue = self.ctx.settings.minn;\n    bgcolor1 = self.ctx.settings.grad1;\n    bgcolor2 = self.ctx.settings.grad2;\n    bgcolor3 = self.ctx.settings.grad3;\n    bgcolor4 = self.ctx.settings.grad4;\n    bgcolor5 = self.ctx.settings.grad5;\n    val1 = self.ctx.settings.grad1Deg;\n    val2 = self.ctx.settings.grad2Deg;\n    val3 = self.ctx.settings.grad3Deg;\n    val4 = self.ctx.settings.grad4Deg;\n    val5 = self.ctx.settings.grad5Deg;\n    colorSet = [bgcolor1,bgcolor2,bgcolor3,bgcolor4,bgcolor5];\n    valueSet = [val1,val2,val3,val4,val5];\n   \n  \n    linearGauge = new LinearGrad(minValue, maxValue);\n    \n    \n    while(objectCounter2[currentObject2] != null)\n    {\n        currentObject2++;\n    }\n     \n    objectCounter2[currentObject2] = linearGauge;\n    objectCounter2[currentObject2].createGradient(gaugeElement2, colorSet, valueSet);\n    objectCounter2[currentObject2].setGaugeValue(gaugeElement2, value, colorSet, valueSet);\n    self.onResize();\n    \n    \n}\n \n\nclass LinearGrad {\n        \n        constructor(minValue, maxValue)\n        {\n            this.minValue = minValue;\n            this.maxValue = maxValue;\n            progressSpeed = 95/Math.abs(maxValue - minValue);\n            \n        }\n        \n        \n        createGradient(gauge, colorSet, valueSet)\n        { \n         var s1 = ((valueSet[0]-this.minValue) * progressSpeed);\n         var s2 = ((valueSet[1]-this.minValue) * progressSpeed);\n         var s3 = ((valueSet[2]-this.minValue) * progressSpeed);\n         var s4 = ((valueSet[3]-this.minValue)  * progressSpeed);\n         var s5 = ((valueSet[4]-this.minValue)  * progressSpeed);\n         \n         var startC1 = s1 + 10; \n         var startC2 = s2 + 10; \n         var startC3 = s3 + 10; \n         var startC4 = s4 + 10; \n         var startC5 = s5 + 10; \n         \n         var endC1 = s1 - 10; \n         var endC2 = s2 - 10; \n         var endC3 = s3 - 10; \n         var endC4 = s4 - 10; \n         var endC5 = s5 - 10; \n         \n      \n       \n          var themeColor = self.ctx.settings.theme;\n          var circle = gauge.querySelector(\".circle\");\n          circle.style.setProperty(\"--cp-color\", themeColor);\n      \n         \n        //  gauge.querySelector(\".circle\").style.setProperty(\"--cp-color\", \"#ffffff\");\n            \n          gauge.querySelector(\".progress-bar\").style.background = \n         'linear-gradient(to right, '+colorSet[0]+' 0,'+colorSet[0]+' '+endC1+'%,'+ colorSet[1]+' '+startC1+'%,  '+colorSet[1]+' '+endC2+'%,'+ colorSet[2]+' '+startC2+'%,  '+colorSet[2]+' '+endC3+'%,'+ colorSet[3]+' '+startC3+'%,  '+colorSet[3]+' '+endC4+'%,'+ colorSet[4]+' '+startC4+'%,  '+colorSet[4]+' '+endC5+'%)';          \n            \n        }\n\n      setGaugeValue(gauge, value, colorSet, valueSet) \n      {\n            // var percent = gauge.querySelector(`.percent`);\n            // var progressing = gauge.querySelector(`.progressing`);\n           \n            \n            var rozVal = maxValue - minValue;\n            rozVal = (rozVal / 95);\n            \n            gauge.querySelector(`.percent`).innerHTML = `${Math.round(value)}`+self.ctx.units;\n            \n            if(value >= this.minValue && value <= this.maxValue)\n            {\n                gauge.querySelector(\".circle\").style.left = ((value-this.minValue)/rozVal) + '%';\n                 progressRotate = (value - this.minValue) * progressSpeed;\n                var s1 = ((valueSet[0]-this.minValue) * progressSpeed);\n                var s2 = ((valueSet[1] -this.minValue)* progressSpeed);\n                var s3 = ((valueSet[2] -this.minValue)* progressSpeed);\n                var s4 = ((valueSet[3] -this.minValue)* progressSpeed);\n                var s5 = ((valueSet[4] -this.minValue)* progressSpeed);\n            \n                //ZMENA FARBY GULICKY\n                if((progressRotate) >= 0)\n                {\n                  gauge.querySelector(\".circle\").style.background = colorSet[0]; \n                }\n                if( ( progressRotate > s1 ) && ( s1 != 0 ) )\n                {\n                    gauge.querySelector(\".circle\").style.background = colorSet[1]; \n                }\n                if(( progressRotate > s2 ) && ( s2 != 0 ))\n                {\n                    gauge.querySelector(\".circle\").style.background = colorSet[2]; \n                }\n                if(( progressRotate > s3 ) && ( s3 != 0 ))\n                {\n                    gauge.querySelector(\".circle\").style.background = colorSet[3]; \n                }\n                if(( progressRotate > s4 ) && ( s4 != 0 ))\n                {\n                    gauge.querySelector(\".circle\").style.background = colorSet[4]; \n                }\n        \n                \n            }\n            else \n            {\n                if((value > this.maxValue))\n                {\n                    gauge.querySelector(\".circle\").style.left = 95 + '%';\n                    gauge.querySelector(\".circle\").style.background = colorSet[4]; \n                }\n                if((value < this.minValue))\n                {\n                    gauge.querySelector(\".circle\").style.left = 0 + '%';\n                    gauge.querySelector(\".circle\").style.background = colorSet[0]; \n                }\n                \n            }\n    \n      }\n}\n\nself.onDataUpdated = function() {\n    for (var i = 0; i < self.ctx.valueCells.length; i++) {\n        var cellData = self.ctx.data[i];\n        if (cellData && cellData.data && cellData.data.length > 0) {\n            var tvPair = cellData.data[cellData.data.length -\n                1];\n            var value = tvPair[1];\n            var textValue;\n            //toDo -> + IsNumber\n            \n            if (isNumber(value)) {\n                var decimals = self.ctx.decimals;\n                var units = self.ctx.units;\n                if (cellData.dataKey.decimals || cellData.dataKey.decimals === 0) {\n                    decimals = cellData.dataKey.decimals;\n                }\n                if (cellData.dataKey.units) {\n                    units = cellData.dataKey.units;\n                }\n                txtValue = self.ctx.utils.formatValue(value, decimals, units, true);\n            } else {\n                txtValue = value;\n            }\n            self.ctx.valueCells[i].html(txtValue);\n        }\n    }\n    \n  \n    objectCounter2[currentObject2].setGaugeValue(gaugeElement2, value, colorSet, valueSet);\n    function isNumber(n) {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n    \n};\n\nself.onResize = function() {\n    var datasourceTitleFontSize = self.ctx.height/8;\n    if (self.ctx.width/self.ctx.height <= 1.5) {\n        datasourceTitleFontSize = self.ctx.width/12;\n    }\n    datasourceTitleFontSize = Math.min(datasourceTitleFontSize, 20);\n    for (var i = 0; i < self.ctx.datasourceTitleCells.length; i++) {\n        self.ctx.datasourceTitleCells[i].css('font-size', datasourceTitleFontSize+'px');\n    }\n    var valueFontSize = self.ctx.height/9;\n    var labelFontSize = self.ctx.height/9;\n    if (self.ctx.width/self.ctx.height <= 1.5) {\n        valueFontSize = self.ctx.width/15;\n        labelFontSize = self.ctx.width/15;\n    }\n    valueFontSize = Math.min(valueFontSize, 18);\n    labelFontSize = Math.min(labelFontSize, 18);\n    var element = $('.percent', self.ctx.$container)[0];\n   \n    element.style.fontSize = self.ctx.width/14 + \"px\";\n    element.style.marginTop = self.ctx.height/6 + \"px\";\n    for (i = 0; i < self.ctx.valueCells; i++) {\n        self.ctx.valueCells[i].css('font-size', valueFontSize+'px');\n        self.ctx.valueCells[i].css('height', valueFontSize*2.5+'px');\n        self.ctx.valueCells[i].css('padding', '0px ' + valueFontSize + 'px');\n        self.ctx.labelCells[i].css('font-size', labelFontSize+'px');\n        self.ctx.labelCells[i].css('height', labelFontSize*2.5+'px');\n        self.ctx.labelCells[i].css('padding', '0px ' + labelFontSize + 'px');\n    }    \n}\n\nself.onDestroy = function() {\n}\n",
    "settingsSchema": "{\n    \"schema\":{\n      \"type\": \"object\",\n      \"title\": \"EntitiesWidgetSettingsS\",\n      \"properties\": {\n        \n        \"minn\": {\n          \"title\": \"Minimalne rozpatie\",\n          \"type\": \"number\",\n          \"default\": 0\n        },\"maxx\": {\n          \"title\": \"Maximalne rozpatie\",\n          \"type\": \"number\",\n          \"default\": 100\n        },\n          \n          \"theme\": \n        {\n          \"title\": \"Circle Border Color\",\n          \"type\": \"string\",\n          \"default\": \"#ffffff\"\n        },  \n    \n        \"grad1\": \n        {\n          \"title\": \"Gradient 1\",\n          \"type\": \"string\",\n          \"default\": \"#e3e3e3\"\n        },  \n        \"grad1Deg\": \n        {\n          \"title\": \"Gradient:Stop Color Value\",\n          \"type\": \"number\",\n          \"default\": 10\n        },   \n        \"grad2\": \n        {\n          \"title\": \"Gradient 2\",\n          \"type\": \"string\",\n          \"default\": \"#e3e3e3\"\n        },   \n        \"grad2Deg\": \n        {\n          \"title\": \"Gradient2:Stop Color Value\",\n          \"type\": \"number\",\n          \"default\": 30\n        },   \"grad3\": \n        {\n          \"title\": \"Gradient 3\",\n          \"type\": \"string\",\n          \"default\": \"#e3e3e3\"\n        },   \n        \"grad3Deg\": \n        {\n          \"title\": \"Gradient3:Stop Color Value\",\n          \"type\": \"number\",\n          \"default\": 50\n        },   \"grad4\": \n        {\n          \"title\": \"Gradient 4\",\n          \"type\": \"string\",\n          \"default\": \"#e3e3e3\"\n        },   \n        \"grad4Deg\": \n        {\n          \"title\": \"Gradient4:Stop Color Value\",\n          \"type\": \"number\",\n          \"default\": 80\n        },   \"grad5\": \n        {\n          \"title\": \"Gradient 5\",\n          \"type\": \"string\",\n          \"default\": \"#e3e3e3\"\n        },   \n        \"grad5Deg\": \n        {\n          \"title\": \"Gradient5:Stop Color Value\",\n          \"type\": \"number\",\n          \"default\": 100\n        }\n        \n        \n        \n        \n        \n      }, \"required\": []\n    }\n  \n       \n}",
    "dataKeySettingsSchema": "{}\n",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"minn\":0,\"maxx\":100,\"grad1\":\"#e3e3e3\",\"grad1Deg\":10,\"grad2\":\"#e3e3e3\",\"grad2Deg\":30,\"grad3\":\"#e3e3e3\",\"grad3Deg\":50,\"grad4\":\"#e3e3e3\",\"grad4Deg\":80,\"grad5\":\"#e3e3e3\",\"grad5Deg\":100,\"theme\":\"#ff0000\"},\"title\":\"Linear grad claass\",\"showTitleIcon\":false,\"titleTooltip\":\"\",\"dropShadow\":true,\"enableFullscreen\":true,\"enableDataExport\":true,\"widgetStyle\":{\"border-radius\":\"15px\"},\"widgetCss\":\"\",\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"noDataDisplayMessage\":\"\",\"showLegend\":false,\"units\":\" ppm\"}"
  }
}