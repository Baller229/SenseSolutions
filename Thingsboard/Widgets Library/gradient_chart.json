{
  "alias": "patograph2",
  "name": "Gradient_Background_Chart",
  "image": null,
  "description": null,
  "descriptor": {
    "type": "timeseries",
    "sizeX": 8,
    "sizeY": 5,
    "resources": [
      {
        "url": "https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js"
      },
      {
        "url": "https://cdnjs.cloudflare.com/ajax/libs/chartjs-plugin-zoom/0.7.7/chartjs-plugin-zoom.min.js"
      },
      {
        "url": "https://cdnjs.cloudflare.com/ajax/libs/hammer.js/2.0.8/hammer.min.js"
      }
    ],
    "templateHtml": "\n <canvas id=\"myChart\"></canvas>\n",
    "templateCss": ".legend {\n    font-size: 13px;\n    line-height: 10px;\n}\n\n.legend table { \n    border-spacing: 0px;\n    border-collapse: separate;\n}\n\n.mouse-events .flot-overlay {\n    cursor: crosshair; \n}\n\n",
    "controllerScript": "    \r\n    \r\n    var gaugeElement3 \r\n    var myChart;\r\n    var canvasCtx;\r\n    var width; \r\n    var height; \r\n    var gradient;\r\n    var maxValue; \r\n    var minValue;\r\n    var bgcolor1, bgcolor2, bgcolor3, bgcolor4, bgcolor5;\r\n    var val1, val2, val3, val4, val5;\r\n    var colorSet;\r\n    var valueSet;\r\n    \r\n    //https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js\r\n    \r\n    self.onInit = function() \r\n    {\r\n        \r\n//=============================================================================  \r\n//  GRADIENT\r\n//=============================================================================   \r\n        //===========================================\r\n          gaugeElement3 = $('#myChart', self.ctx.$container)[0];\r\n         \r\n          maxValue = self.ctx.settings.maxx;\r\n          minValue = self.ctx.settings.minn;\r\n          bgcolor1 = self.ctx.settings.grad1;\r\n          bgcolor2 = self.ctx.settings.grad2;\r\n          bgcolor3 = self.ctx.settings.grad3;\r\n          bgcolor4 = self.ctx.settings.grad4;\r\n          bgcolor5 = self.ctx.settings.grad5;\r\n          val1 = self.ctx.settings.grad1Deg;\r\n          val2 = self.ctx.settings.grad2Deg;\r\n          val3 = self.ctx.settings.grad3Deg;\r\n          val4 = self.ctx.settings.grad4Deg;\r\n          val5 = self.ctx.settings.grad5Deg;\r\n          crossHairColor = self.ctx.settings.crosshairColor;\r\n          colorSet = [bgcolor1,bgcolor2,bgcolor3,bgcolor4,bgcolor5];\r\n          valueSet = [val1,val2,val3,val4,val5];\r\n          fontcolor = self.ctx.settings.fontColor;\r\n     \r\n          console.log(\"MinValue: \" + minValue);   \r\n          console.log(\"MaxValue: \" + maxValue);   \r\n          console.log(\"bgcolor1: \" + bgcolor1);   \r\n          console.log(\"bgcolor2: \" + bgcolor2);   \r\n          console.log(\"bgcolor3: \" + bgcolor3);   \r\n             \r\n  \r\n        //===========================================   \r\n\r\n        \r\n        function getGradient(ctx, chartArea, colorSet, valueSet, opacity) \r\n        {\r\n           \r\n            var range = Math.abs(maxValue - minValue);\r\n            var gradientProgress = 1/range;\r\n        \r\n            var v = [10];\r\n            \r\n             v[0] = (gradientProgress*valueSet[0]) - 0.03;\r\n             v[1] = (gradientProgress*valueSet[0]) + 0.03;\r\n             v[2] = (gradientProgress*valueSet[1]) - 0.03;\r\n             v[3] = (gradientProgress*valueSet[1]) + 0.03;\r\n             v[4] = (gradientProgress*valueSet[2]) - 0.03;\r\n             v[5] = (gradientProgress*valueSet[2]) + 0.03;\r\n             v[6] = (gradientProgress*valueSet[3]) - 0.03;\r\n             v[7] = (gradientProgress*valueSet[3]) + 0.03;\r\n               \r\n            v.forEach(function (item, index) \r\n            {\r\n                console.log(item, index);\r\n                if(item > 1)\r\n                {\r\n                    v[index] = 1;\r\n                }\r\n                if(item < 0)\r\n                {\r\n                    v[index] = 0;\r\n                }\r\n            });   \r\n               \r\n            console.log(\"value1: \" + v[0]);   \r\n            console.log(\"gradientProgress: \" + gradientProgress);   \r\n            console.log(\"range: \" + range);   \r\n            console.log(\"minValue: \" + minValue);   \r\n\r\n            const chartWidth = chartArea.right - chartArea.left;\r\n            const chartHeight = chartArea.bottom - chartArea.top;\r\n            if (!gradient || width !== chartWidth || height !== chartHeight) \r\n            {\r\n                // Create the gradient because this is either the first render\r\n                // or the size of the chart has changed\r\n                var nan = 0;\r\n                \r\n                width = chartWidth;\r\n                height = chartHeight;\r\n                gradient = ctx.createLinearGradient(0, chartArea.bottom, 0, chartArea.top);\r\n           \r\n                gradient.addColorStop(0, colorSet[0] + opacity);\r\n                gradient.addColorStop(v[0], colorSet[0] + opacity);\r\n                \r\n                gradient.addColorStop(v[1], colorSet[1] + opacity);\r\n                gradient.addColorStop(v[2], colorSet[1] + opacity);\r\n                \r\n                gradient.addColorStop(v[3], colorSet[2] + opacity);\r\n                gradient.addColorStop(v[4], colorSet[2] + opacity);\r\n            \r\n                gradient.addColorStop(v[5], colorSet[3] + opacity);\r\n                gradient.addColorStop(v[6], colorSet[3] + opacity);\r\n            \r\n                gradient.addColorStop(v[7], colorSet[4] + opacity); \r\n                gradient.addColorStop(1, colorSet[4] + opacity); \r\n                 \r\n            }\r\n            return gradient;\r\n        }\r\n//=============================================================================\r\n        \r\n        \r\n\r\n//=============================================================================  \r\n//  CHARTDATA\r\n//=============================================================================        \r\n        var chartData = \r\n        {\r\n            datasets: []\r\n        };\r\n//=============================================================================\r\n\r\n\r\n//=============================================================================  \r\n//  \r\n//=============================================================================        \r\n        for (var i=0; i < self.ctx.data.length; i++) \r\n        {\r\n            var dataKey = self.ctx.data[i].dataKey;\r\n            var dataset = \r\n            {\r\n                label: dataKey.label,\r\n                data: [],\r\n                \r\n                    borderColor: function(context) \r\n                             {\r\n                                const chart = context.chart;\r\n                                const {ctx, chartArea} = chart;\r\n            \r\n                                if (!chartArea) \r\n                                {\r\n                                    // This case happens on initial chart load\r\n                                    return;\r\n                                }\r\n                             return getGradient(ctx, chartArea, colorSet, valueSet, \"FF\");\r\n                             },\r\n                \r\n                  \r\n                \r\n                fill: false,\r\n               \r\n                pointBackgroundColor: function(context) \r\n                             {\r\n                                const chart = context.chart;\r\n                                const {ctx, chartArea} = chart;\r\n            \r\n                                if (!chartArea) \r\n                                {\r\n                                    // This case happens on initial chart load\r\n                                    return;\r\n                                }\r\n                             return getGradient(ctx, chartArea, colorSet, valueSet, \"FF\");\r\n                             },\r\n                \r\n                pointRadius: 0,\r\n                 borderWidth: 4,\r\n                 pointBorderWidth: 0,\r\n                //  pointBorderColor: 'white',\r\n                // pointHoverRadius: 4\r\n                \r\n            };\r\n            chartData.datasets.push(dataset);\r\n        }\r\n//=============================================================================\r\n\r\n\r\n\r\n//=============================================================================  \r\n//  OPTIONS\r\n//=============================================================================        \r\n\r\n        var options = \r\n        {\r\n           \r\n        // plugins: \r\n        // {\r\n        //      zoom: \r\n        //         {\r\n        //             pan: \r\n        //             {\r\n        //                 enabled: true,\r\n        //                 mode: 'x',\r\n        //                 treshold: 10,\r\n        //             },  \r\n        //             zoom:\r\n        //             {\r\n        //              drag: \r\n        //             {\r\n        //                 enabled: true,\r\n                       \r\n        //             }     \r\n        //             }\r\n                    \r\n                     \r\n        //         }\r\n        // }, \r\n        \r\n      \r\n        hover: \r\n        {\r\n        mode: 'index',\r\n        intersect: true\r\n      \r\n                \r\n            },\r\n        tooltips: \r\n        {\r\n            // backgroundColor: '#FFF',\r\n            // bodyFontColor: '#393f5b',\r\n            // bodyFontSize: 20,\r\n            // displayColors: false,\r\n            // bodySpacing: 10,\r\n            intersect: false,\r\n            bodyFontStyle: 'bold',\r\n            xPadding: 15,\r\n            yPadding: 15,\r\n            mode: 'index',\r\n        //     callbacks: {\r\n        //       title: function() {}\r\n        // }\r\n         },\r\n           \r\n            maintainAspectRatio: false,\r\n            legend: \r\n            {\r\n                display: false\r\n               \r\n            },\r\n            scales: \r\n            {\r\n                xAxes: \r\n                [{\r\n                    distribution: 'series',\r\n                    ticks: \r\n                    {\r\n                        \r\n                        maxTicksLimit: 12,\r\n                        fontColor: fontcolor\r\n                    },\r\n                    \r\n                  \r\n                    gridLines: \r\n                    {\r\n                        // color: \"black\",\r\n                        display: false,\r\n                    },\r\n                    type: 'time',\r\n              \r\n                    time: \r\n                    {\r\n                         \r\n                         displayFormats: \r\n                         {\r\n                              day: 'MMM D',\r\n                              hour: 'HH:mm',\r\n                              minute: 'h:mm:ss',\r\n                              second: 'h:mm:ss'\r\n                              \r\n                         }\r\n                    },\r\n               \r\n                    \r\n                }],\r\n                \r\n                yAxes: \r\n                [{\r\n                    \r\n                    gridLines: \r\n                    {\r\n                         display: false,\r\n                    },\r\n                    stacked: true, \r\n                    ticks: \r\n                    {\r\n                        precision:0,\r\n                        fontColor: fontcolor,\r\n                        min: minValue, // minimum value\r\n                        max: maxValue // maximum value\r\n                    }\r\n                }]\r\n            }\r\n        };\r\n         \r\n                \r\n//=============================================================================\r\n\r\n\r\n\r\n//=============================================================================  \r\n//  OBJECT myChart\r\n//=============================================================================        \r\n\r\nChart.defaults.LineWithLine = Chart.defaults.line;\r\nChart.controllers.LineWithLine = Chart.controllers.line.extend({\r\n  draw: function(ease) {\r\n    if (this.chart.tooltip._active && this.chart.tooltip._active.length) {\r\n      var activePoint = this.chart.tooltip._active[0],\r\n        ctx = this.chart.ctx,\r\n        x = activePoint.tooltipPosition().x,\r\n        topY = this.chart.scales['y-axis-0'].top,\r\n        bottomY = this.chart.scales['y-axis-0'].bottom;\r\n\r\n      // draw line\r\n      ctx.save();\r\n      ctx.beginPath();\r\n      ctx.moveTo(x, topY);\r\n      ctx.lineTo(x, bottomY);\r\n      ctx.lineWidth = 2;\r\n      ctx.strokeStyle = crossHairColor;\r\n      ctx.shadowBlur = 1;\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    }\r\n    Chart.controllers.line.prototype.draw.call(this, ease);\r\n  }\r\n});\r\n\r\n//=============================================================================     \r\n    \r\n        myChart = new Chart(gaugeElement3, \r\n        {\r\n            type: 'LineWithLine',\r\n            data: chartData,\r\n            options: options\r\n        });\r\n        self.onResize();\r\n//=============================================================================\r\n//                 *******************************************\r\n//=============================================================================\r\n    }\r\n    \r\n    \r\n    self.onResize = function() \r\n    {\r\n        myChart.resize();\r\n    }\r\n    \r\n    self.onDataUpdated = function() \r\n    {\r\n        for (var i = 0; i < self.ctx.data.length; i++) \r\n        {\r\n            var datasourceData = self.ctx.data[i];\r\n            var dataSet = datasourceData.data;\r\n            myChart.data.datasets[i].data.length = 0;\r\n            var data = myChart.data.datasets[i].data;\r\n            for (var d = 0; d < dataSet.length; d++) \r\n            {\r\n                var tsValuePair = dataSet[d];\r\n                var ts = tsValuePair[0];\r\n                var value = tsValuePair[1];\r\n                data.push({t: ts, y: value});\r\n            }\r\n        }\r\n         //myChart.options.scales.xAxes[0].ticks.min = self.ctx.timeWindow.minTime;\r\n         //myChart.options.scales.xAxes[0].ticks.max = self.ctx.timeWindow.maxTime;\r\n         myChart.update();\r\n    };\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n",
    "settingsSchema": "{\n    \"schema\":{\n      \"type\": \"object\",\n      \"title\": \"EntitiesWidgetSettings\",\n      \"properties\": {\n        \n        \"crosshairColor\": \n        {\n          \"title\": \"Crosshair color\",\n          \"type\": \"string\",\n          \"default\": \"#e3e3e3\"\n        },  \n        \n        \"fontColor\": \n        {\n          \"title\": \"Font color\",\n          \"type\": \"string\",\n          \"default\": \"#000000\"\n        },   \n       \n        \"minn\": {\n          \"title\": \"Minimalne rozpatie\",\n          \"type\": \"number\",\n          \"default\": 0\n        },\"maxx\": {\n          \"title\": \"Maximalne rozpatie\",\n          \"type\": \"number\",\n          \"default\": 100\n        },\n        \n      \n        \n        \"grad1\": \n        {\n          \"title\": \"Gradient 1\",\n          \"type\": \"string\",\n          \"default\": \"#e3e3e3\"\n        },  \n        \"grad1Deg\": \n        {\n          \"title\": \"Gradient:Stop Color Value\",\n          \"type\": \"number\",\n          \"default\": 10\n        },   \n        \"grad2\": \n        {\n          \"title\": \"Gradient 2\",\n          \"type\": \"string\",\n          \"default\": \"#e3e3e3\"\n        },   \n        \"grad2Deg\": \n        {\n          \"title\": \"Gradient2:Stop Color Value\",\n          \"type\": \"number\",\n          \"default\": 30\n        },   \"grad3\": \n        {\n          \"title\": \"Gradient 3\",\n          \"type\": \"string\",\n          \"default\": \"#e3e3e3\"\n        },   \n        \"grad3Deg\": \n        {\n          \"title\": \"Gradient3:Stop Color Value\",\n          \"type\": \"number\",\n          \"default\": 50\n        },   \"grad4\": \n        {\n          \"title\": \"Gradient 4\",\n          \"type\": \"string\",\n          \"default\": \"#e3e3e3\"\n        },   \n        \"grad4Deg\": \n        {\n          \"title\": \"Gradient4:Stop Color Value\",\n          \"type\": \"number\",\n          \"default\": 80\n        },   \"grad5\": \n        {\n          \"title\": \"Gradient 5\",\n          \"type\": \"string\",\n          \"default\": \"#e3e3e3\"\n        },   \n        \"grad5Deg\": \n        {\n          \"title\": \"Gradient5:Stop Color Value\",\n          \"type\": \"number\",\n          \"default\": 100\n        }\n        \n        \n        \n        \n        \n      }, \"required\": []\n    }\n  \n       \n}",
    "dataKeySettingsSchema": "{}",
    "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"showLines\":true,\"fillLines\":false,\"showPoints\":false},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"minn\":0,\"grad1\":\"#e3e3e3\",\"grad2\":\"#e3e3e3\",\"grad3\":\"#e3e3e3\",\"grad4\":\"#e3e3e3\",\"grad5\":\"#e3e3e3\",\"maxx\":600,\"grad1Deg\":300,\"grad2Deg\":600,\"grad3Deg\":600,\"grad4Deg\":600,\"grad5Deg\":600,\"crosshairColor\":\"#e3e3e3\",\"fontColor\":\"#000000\"},\"title\":\"Gradient_Background_Chart\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null}"
  }
}